<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sudoku</name>
    </assembly>
    <members>
        <member name="T:Sudoku.DifficultyDialogBox">
            <summary>
            Interaction logic for DifficultyDialogBox.xaml
            </summary>
            <summary>
            DifficultyDialogBox
            </summary>
        </member>
        <member name="P:Sudoku.DifficultyDialogBox.Result">
            <summary>
            Chosen difficulty.
            </summary>
        </member>
        <member name="M:Sudoku.DifficultyDialogBox.#ctor">
            <summary>
            Dialog window constructor.
            </summary>
        </member>
        <member name="M:Sudoku.DifficultyDialogBox.OptionChosen(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Enables "Continue" button and updates choice.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.DifficultyDialogBox.BtnContinue_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Returns to the main window with positive result.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.DifficultyDialogBox.BtnCancel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Returns to the main window with negative result.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.DifficultyDialogBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Sudoku.Board">
            <summary>
            Board representing the sudoku grid.
            </summary>
        </member>
        <member name="F:Sudoku.Board.CellChanged">
            <summary>
            Handler for the grid changes.
            </summary>
        </member>
        <member name="F:Sudoku.Board.PuzzleSolved">
            <summary>
            Handler for a solved puzzle.
            </summary>
        </member>
        <member name="F:Sudoku.Board.ID">
            <summary>
            Sudoku ID.
            </summary>
        </member>
        <member name="F:Sudoku.Board.GRID_SIZE">
            <summary>
            Default grid size of a sudoku.
            </summary>
        </member>
        <member name="F:Sudoku.Board.MINIGRID_SIZE">
            <summary>
            Default minigrid size of a sudoku.
            </summary>
        </member>
        <member name="F:Sudoku.Board.grid">
            <summary>
            Representation of the current grid.
            </summary>
        </member>
        <member name="F:Sudoku.Board.solution">
            <summary>
            Solution to the puzzle.
            </summary>
        </member>
        <member name="M:Sudoku.Board.#ctor(Sudoku.Difficulty,Sudoku.Cell[],System.Boolean)">
            <summary>
            Parameter constructor.
            </summary>
            <param name="difficulty">Chosen difficulty.</param>
            <param name="grid">Given grid.</param>
            <param name="solved">Indicates if solved.</param>
        </member>
        <member name="M:Sudoku.Board.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sudoku.Board.#ctor(Sudoku.Difficulty)">
            <summary>
            Constructor only with difficulty initializer.
            </summary>
            <param name="difficulty">Chosen difficulty</param>
        </member>
        <member name="M:Sudoku.Board.#ctor(Sudoku.Board)">
            <summary>
            Copy constructor.
            </summary>
            <param name="other">Object we copy from.</param>
        </member>
        <member name="P:Sudoku.Board.Grid">
            <summary>
            Grid property.
            </summary>
        </member>
        <member name="P:Sudoku.Board.Difficulty">
            <summary>
            Chosen difficulty.
            </summary>
        </member>
        <member name="P:Sudoku.Board.Solution">
            <summary>
            Deep copy solution property.
            </summary>
        </member>
        <member name="P:Sudoku.Board.Solved">
            <summary>
            Indicates whether the puzzle was solved
            </summary>
        </member>
        <member name="M:Sudoku.Board.GetGridCopy">
            <summary>
            Copies the current grid.
            </summary>
            <returns>Copy of the current grid.</returns>
        </member>
        <member name="M:Sudoku.Board.CheckIfSolved">
            <summary>
            Checks of the puzzle was solved.
            In case it was, invokes the PuzzleSolved event.
            Otherwise checks the modifiable cells for collisions.
            </summary>
        </member>
        <member name="M:Sudoku.Board.SetUpGrid">
            <summary>
            Generates the solution and arranges the grid
            according to the chosen difficulty.
            </summary>
        </member>
        <member name="M:Sudoku.Board.Solve">
            <summary>
            Reveals the solution.
            </summary>
        </member>
        <member name="M:Sudoku.Board.OnCellChanged(System.Object,System.EventArgs)">
            <summary>
            Handles a cell value change.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Arguments</param>
        </member>
        <member name="M:Sudoku.Board.ToString">
            <summary>
            Short string representation of the board.
            </summary>
            <returns>Short string identificator</returns>
        </member>
        <member name="T:Sudoku.BoardValidator">
            <summary>
            Helper static class for board validation.
            </summary>
        </member>
        <member name="M:Sudoku.BoardValidator.ValidateRow(System.Byte[],System.Int32)">
            <summary>
            Checks if a row is valid.
            </summary>
            <param name="b">Solution grid.</param>
            <param name="row">Row to check.</param>
            <returns>True if no collisions are found.</returns>
        </member>
        <member name="M:Sudoku.BoardValidator.ValidateCol(System.Byte[],System.Int32)">
            <summary>
            Checks if a column is valid.
            </summary>
            <param name="b">Solution grid.</param>
            <param name="col">Row to check.</param>
            <returns>True if no collisions are found.</returns>
        </member>
        <member name="M:Sudoku.BoardValidator.ValidateMinigrid(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks if a minigrid is valid.
            </summary>
            <param name="b">Solution grid.</param>
            <param name="x">Cell row.</param>
            <param name="y">Cell column.</param>
            <returns>True if no collisions are found.</returns>
        </member>
        <member name="M:Sudoku.BoardValidator.ValidateBoard(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks if there are any row, column
            or minigrid collisions with the value in the
            given cell coordinates.
            </summary>
            <param name="b">Grid to check</param>
            <param name="x">Row</param>
            <param name="y">Column</param>
            <returns></returns>
        </member>
        <member name="M:Sudoku.BoardValidator.ValidateRow(Sudoku.Cell[],System.Int32,System.Int32)">
            <summary>
            Checks if row is valid.
            </summary>
            <param name="b">Sudoku grid.</param>
            <param name="x">Cell row.</param>
            <param name="y">Cell column.</param>
            <returns>True if no collisions are found.</returns>
        </member>
        <member name="M:Sudoku.BoardValidator.ValidateCol(Sudoku.Cell[],System.Int32,System.Int32)">
            <summary>
            Check if column is valid.
            </summary>
            <param name="b">Sudoku grid.</param>
            <param name="x">Cell row.</param>
            <param name="y">Cell column.</param>
            <returns>True if no collisions are found.</returns>
        </member>
        <member name="M:Sudoku.BoardValidator.ValidateMinigrid(Sudoku.Cell[],System.Int32,System.Int32)">
            <summary>
            Checks if a minigrid is valid.
            </summary>
            <param name="b">Sudoku grid.</param>
            <param name="x">Cell row.</param>
            <param name="y">Cell column.</param>
            <returns>True if no collisions are found.</returns>
        </member>
        <member name="M:Sudoku.BoardValidator.ValidateBoard(Sudoku.Cell[],System.Int32,System.Int32)">
            <summary>
            Checks if there are any row, column
            or minigrid collisions with the value in the
            given cell coordinates and also if the grid has any empty cells.
            </summary>
            <param name="b">Grid to check.</param>
            <param name="x">Cell row.</param>
            <param name="y">Cell column.</param>
            <returns>The results of each condition plus completeness of the grid, all in a tuple.</returns>
        </member>
        <member name="T:Sudoku.ByteConverter">
            <summary>
            Custom converter for the binding.
            </summary>
        </member>
        <member name="M:Sudoku.ByteConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts nullable byte to string.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Sudoku.ByteConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts string to nullable byte.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Sudoku.Timer">
            <summary>
            Simple time tracking using dispatcher and stopwatch
            </summary>
        </member>
        <member name="E:Sudoku.Timer.PropertyChanged">
            <summary>
            Handles property changes.
            </summary>
        </member>
        <member name="M:Sudoku.Timer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Sudoku.Timer.CurrentTime">
            <summary>
            Holds string representation of current time.
            </summary>
        </member>
        <member name="M:Sudoku.Timer.Tick(System.Object,System.EventArgs)">
            <summary>
            Handles seconds ticking of the dispatcher.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Arguments</param>
        </member>
        <member name="M:Sudoku.Timer.Reset">
            <summary>
            Resets the timer.
            </summary>
        </member>
        <member name="M:Sudoku.Timer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Sudoku.Timer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="T:Sudoku.Difficulty">
            <summary>
            Represents the number of empty cells.
            </summary>
        </member>
        <member name="F:Sudoku.Difficulty.EASY">
            <summary>
            Easy mode hides 26 cells.
            </summary>
        </member>
        <member name="F:Sudoku.Difficulty.MEDIUM">
            <summary>
            Medium mode hides 41 cells.
            </summary>
        </member>
        <member name="F:Sudoku.Difficulty.HARD">
            <summary>
            Hard mode hides 56 cells.
            </summary>
        </member>
        <member name="T:Sudoku.Cell">
            <summary>
            Cell class that holds a nullable byte value.
            </summary>
        </member>
        <member name="E:Sudoku.Cell.PropertyChanged">
            <summary>
            Handles property changes.
            </summary>
        </member>
        <member name="F:Sudoku.Cell.data">
            <summary>
            Value of the object.
            </summary>
        </member>
        <member name="M:Sudoku.Cell.#ctor(System.Nullable{System.Byte},System.Boolean,System.Int32)">
            <summary>
            Parameter constructor.
            </summary>
            <param name="data">Value</param>
            <param name="modifiable">Modifiable indicator</param>
            <param name="index">Index in grid</param>
        </member>
        <member name="M:Sudoku.Cell.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sudoku.Cell.#ctor(Sudoku.Cell)">
            <summary>
            Copy constructor
            </summary>
            <param name="other">Copied object</param>
        </member>
        <member name="P:Sudoku.Cell.Data">
            <summary>
            Data property.
            </summary>
        </member>
        <member name="P:Sudoku.Cell.Index">
            <summary>
            Index representing the position in the grid.
            </summary>
        </member>
        <member name="P:Sudoku.Cell.Modifiable">
            <summary>
            Indicates if the cell value can be changed.
            </summary>
        </member>
        <member name="M:Sudoku.Cell.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies about property changes.
            </summary>
            <param name="propName">Property name</param>
        </member>
        <member name="T:Sudoku.SudokuGenerator">
            <summary>
            Generates a random sudoku puzzle.
            </summary>
        </member>
        <member name="M:Sudoku.SudokuGenerator.GenerateSudoku(System.Byte)">
            <summary>
            Uses a simple algorithm with backtracking to generate a sudoku solution.
            </summary>
            <param name="size">Default grid size.</param>
            <returns>Found solution.</returns>
        </member>
        <member name="T:Sudoku.SudokuUserControl">
            <summary>
            Interaction logic for SudokuUserControl.xaml
            </summary>
            <summary>
            SudokuUserControl
            </summary>
        </member>
        <member name="M:Sudoku.SudokuUserControl.#ctor">
            <summary>
            Main method.
            </summary>
        </member>
        <member name="M:Sudoku.SudokuUserControl.BindTimer(Sudoku.Timer)">
            <summary>
            Bind new timer to textblock.
            </summary>
        </member>
        <member name="M:Sudoku.SudokuUserControl.InitializeSaveDirectory">
            <summary>
            Setting up the save directory.
            </summary>
        </member>
        <member name="M:Sudoku.SudokuUserControl.ResetInterface(Sudoku.Timer)">
            <summary>
            Rebind textboxes to their corresponding grid cell.
            Reset the timer and clear the undo/redo stacks.
            </summary>
        </member>
        <member name="M:Sudoku.SudokuUserControl.GenerateGrid">
            <summary>
            Creating a TextBox for each grid cell.
            </summary>
        </member>
        <member name="M:Sudoku.SudokuUserControl.TextBox_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles textbox being focused
            </summary>
            <param name="sender">TextBox</param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.SudokuUserControl.TextBox_LostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles textbox losing focus
            </summary>
            <param name="sender">TextBox</param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.SudokuUserControl.TextBox_BackKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handling textbox backspace input.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.SudokuUserControl.TextBox_PreviewTextInput(System.Object,System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Handling textbox input.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.SudokuUserControl.MnuNew_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Menu option File->New generates new sudoku
            with the chosen difficulty.
            </summary>
            <param name="sender">File->New</param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.SudokuUserControl.MnuSolve_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Menu option "Edit->Solve" to solve the current puzzle.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.SudokuUserControl.MnuUndo_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Menu option to undo the last action on the grid.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.SudokuUserControl.MnuRedo_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Menu option to redo the last action on the grid.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.SudokuUserControl.MnuLoad_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Menu option "File->Load" to load selected progress from the list.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.SudokuUserControl.MnuLoadFromFile_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Menu option "File->Load From File" to load an exisitng sudoku.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.SudokuUserControl.MnuSave_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Menu option "File->Save" to save current progress.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.SudokuUserControl.MnuSaveAs_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Menu option "File->Save As" to save the current sudoku as a file.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.SudokuUserControl.MnuCheckProgress_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Menu option to check current progress.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.SudokuUserControl.OnSolved(System.Object,System.EventArgs)">
            <summary>
            Handling solved puzzle.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.SudokuUserControl.OnCellChanged(System.Object,System.EventArgs)">
            <summary>
            Handling cell value change.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sudoku.SudokuUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Sudoku.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:Sudoku.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Sudoku.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:Sudoku.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:Sudoku.MainWindow.#ctor">
            <summary>
            Main window of the application.
            </summary>
        </member>
        <member name="M:Sudoku.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Sudoku.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Sudoku.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Sudoku.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
